{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"14_EFe_Hy12LGeiItGYke0eFfVTid1xX8","authorship_tag":"ABX9TyOfDu4Ncu02Z/J8Xov1dGgA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## This file contains the code that carries the ingredients recommendation for a **single** SCENT"],"metadata":{"id":"24nb1G7dYxUi"}},{"cell_type":"markdown","source":["Installing libraries"],"metadata":{"id":"Ojhliu3hWO8J"}},{"cell_type":"code","source":["!pip install rdkit-pypi\n"," # # Add this in a Google Colab cell to install the correct version of Pytorch Geometric.\n","import torch\n","\n","def format_pytorch_version(version):\n","  return version.split('+')[0]\n","\n","TORCH_version = torch.__version__\n","TORCH = format_pytorch_version(TORCH_version)\n","\n","def format_cuda_version(version):\n","  return 'cu' + version.replace('.', '')\n","\n","CUDA_version = torch.version.cuda\n","CUDA = format_cuda_version(CUDA_version)\n","\n","!pip install torch-scatter     -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n","!pip install torch-sparse      -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n","!pip install torch-cluster     -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n","!pip install torch-spline-conv -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n","!pip install torch-geometric \n","\n","!pip install pytorch-ignite\n","!pip install autotune\n","!pip install ray[default]\n","!pip install tensorboardX\n","!pip install cirpy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"df_DicTr-Hcu","executionInfo":{"status":"ok","timestamp":1682442674123,"user_tz":-60,"elapsed":117956,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"eb096ba1-894a-4523-bb46-9dc74b9dc86e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting rdkit-pypi\n","  Downloading rdkit_pypi-2022.9.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m29.4/29.4 MB\u001b[0m \u001b[31m33.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: Pillow in /usr/local/lib/python3.9/dist-packages (from rdkit-pypi) (8.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from rdkit-pypi) (1.22.4)\n","Installing collected packages: rdkit-pypi\n","Successfully installed rdkit-pypi-2022.9.5\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Looking in links: https://pytorch-geometric.com/whl/torch-2.0.0+cu118.html\n","Collecting torch-scatter\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcu118/torch_scatter-2.1.1%2Bpt20cu118-cp39-cp39-linux_x86_64.whl (10.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.2/10.2 MB\u001b[0m \u001b[31m23.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: torch-scatter\n","Successfully installed torch-scatter-2.1.1+pt20cu118\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Looking in links: https://pytorch-geometric.com/whl/torch-2.0.0+cu118.html\n","Collecting torch-sparse\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcu118/torch_sparse-0.6.17%2Bpt20cu118-cp39-cp39-linux_x86_64.whl (4.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m51.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from torch-sparse) (1.10.1)\n","Requirement already satisfied: numpy<1.27.0,>=1.19.5 in /usr/local/lib/python3.9/dist-packages (from scipy->torch-sparse) (1.22.4)\n","Installing collected packages: torch-sparse\n","Successfully installed torch-sparse-0.6.17+pt20cu118\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Looking in links: https://pytorch-geometric.com/whl/torch-2.0.0+cu118.html\n","Collecting torch-cluster\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcu118/torch_cluster-1.6.1%2Bpt20cu118-cp39-cp39-linux_x86_64.whl (3.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m43.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from torch-cluster) (1.10.1)\n","Requirement already satisfied: numpy<1.27.0,>=1.19.5 in /usr/local/lib/python3.9/dist-packages (from scipy->torch-cluster) (1.22.4)\n","Installing collected packages: torch-cluster\n","Successfully installed torch-cluster-1.6.1+pt20cu118\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Looking in links: https://pytorch-geometric.com/whl/torch-2.0.0+cu118.html\n","Collecting torch-spline-conv\n","  Downloading https://data.pyg.org/whl/torch-2.0.0%2Bcu118/torch_spline_conv-1.2.2%2Bpt20cu118-cp39-cp39-linux_x86_64.whl (885 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m885.2/885.2 kB\u001b[0m \u001b[31m18.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: torch-spline-conv\n","Successfully installed torch-spline-conv-1.2.2+pt20cu118\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting torch-geometric\n","  Downloading torch_geometric-2.3.0.tar.gz (616 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m616.2/616.2 kB\u001b[0m \u001b[31m16.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (4.65.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (1.10.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (2.27.1)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (5.9.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (3.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (1.22.4)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (3.0.9)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.9/dist-packages (from torch-geometric) (1.2.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.9/dist-packages (from jinja2->torch-geometric) (2.1.2)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->torch-geometric) (1.26.15)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->torch-geometric) (3.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->torch-geometric) (2022.12.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests->torch-geometric) (2.0.12)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from scikit-learn->torch-geometric) (3.1.0)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from scikit-learn->torch-geometric) (1.2.0)\n","Building wheels for collected packages: torch-geometric\n","  Building wheel for torch-geometric (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for torch-geometric: filename=torch_geometric-2.3.0-py3-none-any.whl size=909897 sha256=3631510401bbf829488c4b11d8b33ec810970c0c7b81c182a8c2741cee695a49\n","  Stored in directory: /root/.cache/pip/wheels/cd/7d/6b/17150450b80b4a3656a84330e22709ccd8dc0f8f4773ba4133\n","Successfully built torch-geometric\n","Installing collected packages: torch-geometric\n","Successfully installed torch-geometric-2.3.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pytorch-ignite\n","  Downloading pytorch_ignite-0.4.11-py3-none-any.whl (266 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m266.5/266.5 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from pytorch-ignite) (23.1)\n","Requirement already satisfied: torch<3,>=1.3 in /usr/local/lib/python3.9/dist-packages (from pytorch-ignite) (2.0.0+cu118)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.9/dist-packages (from torch<3,>=1.3->pytorch-ignite) (2.0.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.9/dist-packages (from torch<3,>=1.3->pytorch-ignite) (3.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.9/dist-packages (from torch<3,>=1.3->pytorch-ignite) (4.5.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.9/dist-packages (from torch<3,>=1.3->pytorch-ignite) (1.11.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from torch<3,>=1.3->pytorch-ignite) (3.11.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from torch<3,>=1.3->pytorch-ignite) (3.1.2)\n","Requirement already satisfied: lit in /usr/local/lib/python3.9/dist-packages (from triton==2.0.0->torch<3,>=1.3->pytorch-ignite) (16.0.1)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.9/dist-packages (from triton==2.0.0->torch<3,>=1.3->pytorch-ignite) (3.25.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.9/dist-packages (from jinja2->torch<3,>=1.3->pytorch-ignite) (2.1.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.9/dist-packages (from sympy->torch<3,>=1.3->pytorch-ignite) (1.3.0)\n","Installing collected packages: pytorch-ignite\n","Successfully installed pytorch-ignite-0.4.11\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting autotune\n","  Downloading autotune-0.0.3-py3-none-any.whl (6.4 kB)\n","Collecting GPUtil\n","  Downloading GPUtil-1.4.0.tar.gz (5.5 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from autotune) (1.22.4)\n","Building wheels for collected packages: GPUtil\n","  Building wheel for GPUtil (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for GPUtil: filename=GPUtil-1.4.0-py3-none-any.whl size=7408 sha256=a6e9ec1e11d2d7c5ad19a203c09f53bc0c5d5cfa2aed5ba74f784beddeeea1f1\n","  Stored in directory: /root/.cache/pip/wheels/2b/b5/24/fbb56595c286984f7315ee31821d6121e1b9828436021a88b3\n","Successfully built GPUtil\n","Installing collected packages: GPUtil, autotune\n","Successfully installed GPUtil-1.4.0 autotune-0.0.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting ray[default]\n","  Downloading ray-2.3.1-cp39-cp39-manylinux2014_x86_64.whl (58.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.6/58.6 MB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: click>=7.0 in /usr/local/lib/python3.9/dist-packages (from ray[default]) (8.1.3)\n","Collecting aiosignal\n","  Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n","Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from ray[default]) (2.27.1)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.9/dist-packages (from ray[default]) (6.0)\n","Requirement already satisfied: protobuf!=3.19.5,>=3.15.3 in /usr/local/lib/python3.9/dist-packages (from ray[default]) (3.20.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from ray[default]) (3.11.0)\n","Requirement already satisfied: attrs in /usr/local/lib/python3.9/dist-packages (from ray[default]) (23.1.0)\n","Collecting frozenlist\n","  Downloading frozenlist-1.3.3-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (158 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m158.8/158.8 kB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: jsonschema in /usr/local/lib/python3.9/dist-packages (from ray[default]) (4.3.3)\n","Requirement already satisfied: msgpack<2.0.0,>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from ray[default]) (1.0.5)\n","Requirement already satisfied: numpy>=1.19.3 in /usr/local/lib/python3.9/dist-packages (from ray[default]) (1.22.4)\n","Requirement already satisfied: grpcio>=1.32.0 in /usr/local/lib/python3.9/dist-packages (from ray[default]) (1.53.0)\n","Collecting virtualenv>=20.0.24\n","  Downloading virtualenv-20.22.0-py3-none-any.whl (3.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.2/3.2 MB\u001b[0m \u001b[31m81.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting py-spy>=0.2.0\n","  Downloading py_spy-0.3.14-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl (3.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m76.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting colorful\n","  Downloading colorful-0.5.5-py2.py3-none-any.whl (201 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m201.4/201.4 kB\u001b[0m \u001b[31m23.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting aiohttp>=3.7\n","  Downloading aiohttp-3.8.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m59.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pydantic in /usr/local/lib/python3.9/dist-packages (from ray[default]) (1.10.7)\n","Collecting opencensus\n","  Downloading opencensus-0.11.2-py2.py3-none-any.whl (128 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m128.2/128.2 kB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: prometheus-client>=0.7.1 in /usr/local/lib/python3.9/dist-packages (from ray[default]) (0.16.0)\n","Collecting gpustat>=1.0.0\n","  Downloading gpustat-1.1.tar.gz (97 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m97.9/97.9 kB\u001b[0m \u001b[31m12.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: smart-open in /usr/local/lib/python3.9/dist-packages (from ray[default]) (6.3.0)\n","Collecting aiohttp-cors\n","  Downloading aiohttp_cors-0.7.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp>=3.7->ray[default]) (2.0.12)\n","Collecting multidict<7.0,>=4.5\n","  Downloading multidict-6.0.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (114 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m114.2/114.2 kB\u001b[0m \u001b[31m15.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting yarl<2.0,>=1.0\n","  Downloading yarl-1.9.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (269 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m269.3/269.3 kB\u001b[0m \u001b[31m22.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting async-timeout<5.0,>=4.0.0a3\n","  Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n","Collecting nvidia-ml-py>=11.450.129\n","  Downloading nvidia_ml_py-11.525.112-py3-none-any.whl (35 kB)\n","Requirement already satisfied: psutil>=5.6.0 in /usr/local/lib/python3.9/dist-packages (from gpustat>=1.0.0->ray[default]) (5.9.5)\n","Collecting blessed>=1.17.1\n","  Downloading blessed-1.20.0-py2.py3-none-any.whl (58 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.4/58.4 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting distlib<1,>=0.3.6\n","  Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m468.5/468.5 kB\u001b[0m \u001b[31m42.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: platformdirs<4,>=3.2 in /usr/local/lib/python3.9/dist-packages (from virtualenv>=20.0.24->ray[default]) (3.2.0)\n","Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.9/dist-packages (from jsonschema->ray[default]) (0.19.3)\n","Requirement already satisfied: google-api-core<3.0.0,>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from opencensus->ray[default]) (2.11.0)\n","Collecting opencensus-context>=0.1.3\n","  Downloading opencensus_context-0.1.3-py2.py3-none-any.whl (5.1 kB)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.9/dist-packages (from pydantic->ray[default]) (4.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->ray[default]) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->ray[default]) (1.26.15)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->ray[default]) (3.4)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.9/dist-packages (from blessed>=1.17.1->gpustat>=1.0.0->ray[default]) (1.16.0)\n","Requirement already satisfied: wcwidth>=0.1.4 in /usr/local/lib/python3.9/dist-packages (from blessed>=1.17.1->gpustat>=1.0.0->ray[default]) (0.2.6)\n","Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.9/dist-packages (from google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (1.59.0)\n","Requirement already satisfied: google-auth<3.0dev,>=2.14.1 in /usr/local/lib/python3.9/dist-packages (from google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (2.17.3)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.9/dist-packages (from google-auth<3.0dev,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (4.9)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from google-auth<3.0dev,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (0.2.8)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from google-auth<3.0dev,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (5.3.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.9/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3.0dev,>=2.14.1->google-api-core<3.0.0,>=1.0.0->opencensus->ray[default]) (0.4.8)\n","Building wheels for collected packages: gpustat\n","  Building wheel for gpustat (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gpustat: filename=gpustat-1.1-py3-none-any.whl size=26298 sha256=af542655bddb8a8549dea165e47b5f2372f7385fae142da50e5341d38b3c58f6\n","  Stored in directory: /root/.cache/pip/wheels/91/f0/b3/8566d6821307110981a5db015cbf8fd88697446f81e5f40a27\n","Successfully built gpustat\n","Installing collected packages: py-spy, opencensus-context, nvidia-ml-py, distlib, colorful, virtualenv, multidict, frozenlist, blessed, async-timeout, yarl, gpustat, aiosignal, ray, aiohttp, opencensus, aiohttp-cors\n","Successfully installed aiohttp-3.8.4 aiohttp-cors-0.7.0 aiosignal-1.3.1 async-timeout-4.0.2 blessed-1.20.0 colorful-0.5.5 distlib-0.3.6 frozenlist-1.3.3 gpustat-1.1 multidict-6.0.4 nvidia-ml-py-11.525.112 opencensus-0.11.2 opencensus-context-0.1.3 py-spy-0.3.14 ray-2.3.1 virtualenv-20.22.0 yarl-1.9.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorboardX\n","  Downloading tensorboardX-2.6-py2.py3-none-any.whl (114 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m114.5/114.5 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: protobuf<4,>=3.8.0 in /usr/local/lib/python3.9/dist-packages (from tensorboardX) (3.20.3)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from tensorboardX) (23.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from tensorboardX) (1.22.4)\n","Installing collected packages: tensorboardX\n","Successfully installed tensorboardX-2.6\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting cirpy\n","  Downloading CIRpy-1.0.2.tar.gz (20 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: cirpy\n","  Building wheel for cirpy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for cirpy: filename=CIRpy-1.0.2-py3-none-any.whl size=7275 sha256=623144ca6970ce643f63d8f9e96c5fc9503b3263ee93c08968e21261894d9dfc\n","  Stored in directory: /root/.cache/pip/wheels/5e/f2/bf/d7e3a7f02e8c21ef1ee793732528ca1bcdde6f368448c1495a\n","Successfully built cirpy\n","Installing collected packages: cirpy\n","Successfully installed cirpy-1.0.2\n"]}]},{"cell_type":"markdown","source":["Changing directory"],"metadata":{"id":"jGuKCXcNWXJx"}},{"cell_type":"code","source":["import os\n","path = \"/content/drive/MyDrive/Colab Notebooks/Projeto_Sandris\"\n","os.chdir(path)"],"metadata":{"id":"k1c-urZJ-h81","executionInfo":{"status":"ok","timestamp":1682442674124,"user_tz":-60,"elapsed":6,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["Preprocessing - reading to a dataframe, converting CAS number to lists"],"metadata":{"id":"88H0yMeaWY-T"}},{"cell_type":"code","source":["import utils\n","import ast\n","\n","\n","#Importing file\n","scent_file = \"Data/smell_6.csv\" #Put the file path here\n","df_scent = utils.read_csv_2df(scent_file)\n","\n","#Filtering\n","df_filtered = utils.filter_zero_molfrac(df_scent)\n","df_filtered[\"CAS\"] = df_filtered[\"CAS\"].apply(lambda x: ast.literal_eval(x))\n","df_filtered[\"CAS\"] = df_filtered[\"CAS\"].apply(lambda x: x[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0oTRlchZAG1t","executionInfo":{"status":"ok","timestamp":1682442676327,"user_tz":-60,"elapsed":2207,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"763bd237-94a1-4883-89b2-e762fb2595bb"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-2536a3932286>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_filtered[\"CAS\"] = df_filtered[\"CAS\"].apply(lambda x: ast.literal_eval(x))\n","<ipython-input-3-2536a3932286>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_filtered[\"CAS\"] = df_filtered[\"CAS\"].apply(lambda x: x[0])\n"]}]},{"cell_type":"markdown","source":["Converting CAS number to smiles"],"metadata":{"id":"CsVyxOFZWfAp"}},{"cell_type":"code","source":["#Obtaining smiles representation\n","smiles = {}\n","for count, row in enumerate(df_filtered.CAS):\n","  smile = utils.cas_to_smiles(row)\n","  smiles[df_filtered.Substance.iloc[count]] = smile"],"metadata":{"id":"9xA84HF2-kqX","executionInfo":{"status":"ok","timestamp":1682442684574,"user_tz":-60,"elapsed":8252,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["Converting smiles to mol"],"metadata":{"id":"B6M-1oBWWkKY"}},{"cell_type":"code","source":["from rdkit import Chem\n","from sklearn.model_selection import train_test_split\n","import mol2graph\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","from rdkit import Chem\n","from rdkit.Chem import AllChem\n","import numpy as np\n","import torch\n","import torch.nn.functional as F\n","from torch.nn import Linear\n","from torch.nn import BatchNorm1d\n","from torch.utils.data import Dataset\n","from torch_geometric.nn import GCNConv\n","from torch_geometric.nn import ChebConv\n","from torch_geometric.nn import global_add_pool, global_mean_pool\n","from torch_geometric.data import DataLoader\n","from torch_scatter import scatter_mean\n","from rdkit.Chem.Draw import IPythonConsole\n","from rdkit.Chem import Draw"],"metadata":{"id":"Xbyh03ef-8Mv","executionInfo":{"status":"ok","timestamp":1682442687404,"user_tz":-60,"elapsed":2832,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["mols =  {key: Chem.MolFromSmiles(smiles[key]) for key in list(smiles.keys())}"],"metadata":{"id":"31FtBYZ0WqgC","executionInfo":{"status":"ok","timestamp":1682442687405,"user_tz":-60,"elapsed":6,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Printing some ingredient"],"metadata":{"id":"gXNfGZuzYRg5"}},{"cell_type":"code","source":["df_filtered[\"CAS\"].iloc[10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"D9bBtq_zpo79","executionInfo":{"status":"ok","timestamp":1682442687405,"user_tz":-60,"elapsed":5,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"e81c7425-c680-4aff-f333-6b08fed3b606"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'91-64-5'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### Using AI to predict how ingredients smells like"],"metadata":{"id":"5BURla9-ZHAx"}},{"cell_type":"code","source":["graphs = [mol2graph.mol2vec(mols[m]) for m in list(mols.keys())]"],"metadata":{"id":"0TLYIaf1ZKmK","executionInfo":{"status":"ok","timestamp":1682442687787,"user_tz":-60,"elapsed":386,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8efd52ca-06de-463f-e105-1cfe9e49dcf2"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/MyDrive/Colab Notebooks/Projeto_Sandris/mol2graph.py:229: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:245.)\n","  data = Data(x=torch.tensor(node_f, dtype=torch.float),\n"]}]},{"cell_type":"markdown","source":["Building AI model structure"],"metadata":{"id":"fIlKSRilZsrw"}},{"cell_type":"code","source":["#Defining neural model\n","n_features = graphs[0].num_node_features\n","class Net(torch.nn.Module):\n","    def __init__(self, gc, linear, dropout):\n","        super(Net, self).__init__()\n","        self.dropout = dropout\n","        self.conv1 = GCNConv(n_features, gc[0], cached=False) # if you defined cache=True, the shape of batch must be same!\n","        self.bn1 = BatchNorm1d(gc[0]) \n","        self.conv2 = GCNConv(gc[0], gc[1], cached=False)\n","        self.bn2 = BatchNorm1d(gc[1])\n","        self.conv3 = GCNConv(gc[1], gc[2], cached=False)\n","        self.bn3 = BatchNorm1d(gc[2])\n","        self.fc1 = Linear(gc[2], linear[0])\n","        self.bn4 = BatchNorm1d(linear[0])\n","        self.fc2 = Linear(linear[0],linear[1])\n","        self.fc3 = Linear(linear[1], 112)\n","         \n","    def forward(self, data):\n","        #input\n","        x, edge_index = data.x, data.edge_index\n","\n","        #GCN1\n","        x = F.selu(self.conv1(x, edge_index))\n","\n","        #GCN2\n","        #x = self.bn1(x)\n","        x = F.selu(self.conv2(x, edge_index))\n","\n","        #GCN3\n","        #x = self.bn2(x)\n","        x = F.selu(self.conv3(x, edge_index))\n","\n","        #Pooling\n","        x = global_add_pool(x, data.batch)\n","       \n","\n","        #Dense Layer 1\n","        x = self.bn3(x)\n","        x = F.relu(self.fc1(x))\n","        x = F.dropout(x, p = self.dropout, training=self.training)\n","\n","        #Dense Layer 2\n","        x = self.bn4(x)\n","        x = F.relu(self.fc2(x))\n","        x = F.dropout(x, p = self.dropout, training=self.training)\n","        \n","        #Output Layer 3\n","        x = self.fc3(x)\n","        x = torch.sigmoid(x)\n","        return x\n","\n","    #copie de cima de novo\n","    def embbed(self, data):\n","        #input\n","        x, edge_index = data.x, data.edge_index\n","\n","        #GCN1\n","        x = F.selu(self.conv1(x, edge_index))\n","\n","        #GCN2\n","        #x = self.bn1(x)\n","        x = F.selu(self.conv2(x, edge_index))\n","\n","        #GCN3\n","        #x = self.bn2(x)\n","        x = F.selu(self.conv3(x, edge_index))\n","\n","        #Pooling\n","        x = global_add_pool(x, data.batch)\n","       \n","\n","        #Dense Layer 1\n","        #x = self.bn3(x)\n","        x = F.relu(self.fc1(x))\n","        x = F.dropout(x, p = .5, training=self.training)\n","\n","        #Dense Layer 2\n","        x = self.bn4(x)\n","        x = F.relu(self.fc2(x))\n","        return x"],"metadata":{"id":"O7hUFLunZnxJ","executionInfo":{"status":"ok","timestamp":1682442687787,"user_tz":-60,"elapsed":2,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["device = \"cpu\"\n","config = {'gc1': 64, \n"," 'gc2': 128, \n"," 'gc3': 64, \n"," 'l1': 128, \n"," 'l2': 64, \n"," 'lr': 0.00130199,\n"," 'dropout': 0.5, \n"," 'batch_size': 16}\n","model = Net(gc = [config['gc1'], config['gc2'], config['gc3']],\n","                linear = [config['l1'], config['l2']], dropout = config['dropout']).to(device)"],"metadata":{"id":"f4rbSfgibH-5","executionInfo":{"status":"ok","timestamp":1682442687787,"user_tz":-60,"elapsed":2,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["PATH = 'Model/model.pt-alldata'\n","\n","map_location=torch.device('cpu')\n","\n","model.load_state_dict(torch.load(PATH,  map_location = map_location))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cselOUfTbQfI","executionInfo":{"status":"ok","timestamp":1682442688389,"user_tz":-60,"elapsed":603,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"ae60ac4b-3d62-4b8d-effb-851deb7782d0"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["model.conv1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XhVF3nnAaoaW","executionInfo":{"status":"ok","timestamp":1682443028967,"user_tz":-60,"elapsed":241,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"60fe4a50-6473-4296-df20-550900fbc53f"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GCNConv(75, 64)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","fc1_w = model.fc1.weight\n","fc2_w = model.fc2.weight\n","fc3_w = model.fc3.weight\n","\n","fc1_np = fc1_w.detach().numpy()\n","fc2_np = fc2_w.detach().numpy()\n","fc3_np = fc3_w.detach().numpy()\n","pd.DataFrame(fc1_np).to_csv(\"fc1.csv\")\n","pd.DataFrame(fc2_np).to_csv(\"fc2.csv\")\n","pd.DataFrame(fc3_np).to_csv(\"fc3.csv\")"],"metadata":{"id":"M30uLcj_aVnH","executionInfo":{"status":"ok","timestamp":1682443864375,"user_tz":-60,"elapsed":3,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tKI3l31ad3zh","executionInfo":{"status":"ok","timestamp":1682443856963,"user_tz":-60,"elapsed":3,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"56f9600c-767f-4cc0-a842-beecf80fecac"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["embeds = DataLoader(graphs, batch_size = len(graphs), \n","                         shuffle = False)\n","\n","for data in embeds:\n","    model.eval()\n","    data = data.to(device)\n","    output = model.embbed(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TWFG01cEgSUP","executionInfo":{"status":"ok","timestamp":1680014627846,"user_tz":-60,"elapsed":18,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"6485330c-0907-495c-95c3-e8a0147c9e28"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/torch_geometric/deprecation.py:22: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead\n","  warnings.warn(out)\n"]}]},{"cell_type":"code","source":["np_output = output.detach().numpy()"],"metadata":{"id":"w-MmMey-IYay"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np_output.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ftr7kNjLIaQC","executionInfo":{"status":"ok","timestamp":1680014627847,"user_tz":-60,"elapsed":16,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"8421d9df-8104-4d49-9ae3-c03da00f5749"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12, 64)"]},"metadata":{},"execution_count":237}]},{"cell_type":"markdown","source":["Reading ingredients database"],"metadata":{"id":"a5zif4KkCKJg"}},{"cell_type":"code","source":["import pandas as pd\n","import cirpy"],"metadata":{"id":"AFJE4JaiCSX7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ingredients_databank = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/Projeto_Sandris/Data/curated_ds_oh.csv\", index_col = False)"],"metadata":{"id":"nLm5t-ec7t1J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["db_smiles = ingredients_databank.smiles"],"metadata":{"id":"_NAoBWJW7tzD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mols_db = [Chem.MolFromSmiles(smile) for smile in db_smiles]"],"metadata":{"id":"nPnTi1pt7twy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["graphs_db = [mol2graph.mol2vec(mol) for mol in mols_db]"],"metadata":{"id":"dogd_TrS7tub"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["embeds_db = DataLoader(graphs_db, batch_size = len(graphs_db), \n","                         shuffle = False)\n","\n","for data in embeds_db:\n","    model.eval()\n","    data = data.to(device)\n","    output_db = model.embbed(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xaKSQqgW7tlM","executionInfo":{"status":"ok","timestamp":1680014635365,"user_tz":-60,"elapsed":393,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"13e28756-dab9-4e4b-a44f-82eb7feb7d0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/torch_geometric/deprecation.py:22: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead\n","  warnings.warn(out)\n"]}]},{"cell_type":"code","source":["np_output_db = output_db.detach().numpy()"],"metadata":{"id":"OFEmD95EGaI5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np_output_db.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8hn_7774GaGu","executionInfo":{"status":"ok","timestamp":1680014635939,"user_tz":-60,"elapsed":576,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"bb2406bb-3840-4b89-df55-9380d927e4a2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2230, 64)"]},"metadata":{},"execution_count":245}]},{"cell_type":"markdown","source":["Making ingredient recommendation"],"metadata":{"id":"hMb4W7L4Lu-a"}},{"cell_type":"code","source":["from numpy.linalg import norm"],"metadata":{"id":"-WH4PuiELNnk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scores_recommender = np.matmul(np_output_db, np_output.T)"],"metadata":{"id":"oxl5PJIVJ0KI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scores_recommender.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9aVFJDPdId1v","executionInfo":{"status":"ok","timestamp":1680014635940,"user_tz":-60,"elapsed":6,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"2c733654-6eea-47d7-8a3c-4e683dfecc3f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2230, 12)"]},"metadata":{},"execution_count":248}]},{"cell_type":"code","source":["print(np_output_db.shape, np_output.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u9DoHqExMai0","executionInfo":{"status":"ok","timestamp":1680014635941,"user_tz":-60,"elapsed":5,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"d4c0165e-c0d6-41aa-cc45-11727f440c3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2230, 64) (12, 64)\n"]}]},{"cell_type":"code","source":["cos_scores_recommend = np.zeros((np_output_db.shape[0], np_output.shape[0]))\n","\n","for i in range(0, 2230):\n","    for j in range(0, np_output.shape[0]):\n","        cos_scores_recommend[i, j] = np.dot(np_output_db[i, :], np_output[j, :])/(norm(np_output_db[i, :])*norm(np_output[j, :]))"],"metadata":{"id":"UTVFR4RpMX3q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cos_scores_recommend"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sjwEmhpkOspR","executionInfo":{"status":"ok","timestamp":1680014637206,"user_tz":-60,"elapsed":11,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"b97d4e19-8cac-4208-9ff8-0b6d3b9d6556"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.53211361, 0.48457253, 0.40084407, ..., 0.37835252, 0.52174741,\n","        0.21931206],\n","       [0.24497715, 0.26524124, 0.43722966, ..., 0.17250812, 0.30582625,\n","        0.37150523],\n","       [0.82648969, 0.8931545 , 0.53737825, ..., 0.7820887 , 0.76517928,\n","        0.19630261],\n","       ...,\n","       [0.62649328, 0.60884917, 0.4918749 , ..., 0.49934798, 0.84000915,\n","        0.15706788],\n","       [0.58334315, 0.54528362, 0.46074909, ..., 0.47415346, 0.80821365,\n","        0.21181914],\n","       [0.73597443, 0.69080418, 0.41907674, ..., 0.56489223, 0.85843134,\n","        0.1602602 ]])"]},"metadata":{},"execution_count":251}]},{"cell_type":"code","source":["idx_ingredients = np.argsort(cos_scores_recommend , axis=0)[-2]"],"metadata":{"id":"-D16L42eLjES"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["idx_ingredients"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Agr_ovUSInqW","executionInfo":{"status":"ok","timestamp":1680014637206,"user_tz":-60,"elapsed":9,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"c4100985-2050-4579-c357-108af9aaa7af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1371, 1492, 1916,  590, 1479,  799,  102, 1838, 1785,  219,  188,\n","        903])"]},"metadata":{},"execution_count":253}]},{"cell_type":"code","source":["ingredient_names = ingredients_databank.iloc[idx_ingredients, 0:4]"],"metadata":{"id":"Ywoq0PwHL1ox"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Printing ingredients replacers"],"metadata":{"id":"2bmYj30sqx5G"}},{"cell_type":"code","source":["ingredient_names.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0nYLten0LYZi","executionInfo":{"status":"ok","timestamp":1680014637206,"user_tz":-60,"elapsed":8,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"b5356c3f-0457-4cf8-e87c-86970d98ffe7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Unnamed: 0  cas_number  \\\n","1371        1371  29759-11-3   \n","1492        1492    101-41-7   \n","1916        1916    626-77-7   \n","590          590    112-31-2   \n","1479        1479    111-80-8   \n","\n","                                            descriptors               smiles  \n","1371                     ['floral', 'fruiti', 'herbal']  CC(OC(C)=O)c1ccccc1  \n","1492  ['floral', 'gerard', 'waxi', 'spice', 'fruiti'...     COC(=O)Cc1ccccc1  \n","1916  ['alcohol', 'appl', 'gerard', 'juici', 'green'...       CCCCCC(=O)OCCC  \n","590   ['aldehyd', 'gardenia', 'citrus', 'gerard', 'w...         CCCCCCCCCC=O  \n","1479  ['aldehyd', 'melon', 'violet', 'gardenia', 'ch...     CCCCCCC#CC(=O)OC  "],"text/html":["\n","  <div id=\"df-d0a00373-3100-4fc2-b473-89952e696a78\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>cas_number</th>\n","      <th>descriptors</th>\n","      <th>smiles</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1371</th>\n","      <td>1371</td>\n","      <td>29759-11-3</td>\n","      <td>['floral', 'fruiti', 'herbal']</td>\n","      <td>CC(OC(C)=O)c1ccccc1</td>\n","    </tr>\n","    <tr>\n","      <th>1492</th>\n","      <td>1492</td>\n","      <td>101-41-7</td>\n","      <td>['floral', 'gerard', 'waxi', 'spice', 'fruiti'...</td>\n","      <td>COC(=O)Cc1ccccc1</td>\n","    </tr>\n","    <tr>\n","      <th>1916</th>\n","      <td>1916</td>\n","      <td>626-77-7</td>\n","      <td>['alcohol', 'appl', 'gerard', 'juici', 'green'...</td>\n","      <td>CCCCCC(=O)OCCC</td>\n","    </tr>\n","    <tr>\n","      <th>590</th>\n","      <td>590</td>\n","      <td>112-31-2</td>\n","      <td>['aldehyd', 'gardenia', 'citrus', 'gerard', 'w...</td>\n","      <td>CCCCCCCCCC=O</td>\n","    </tr>\n","    <tr>\n","      <th>1479</th>\n","      <td>1479</td>\n","      <td>111-80-8</td>\n","      <td>['aldehyd', 'melon', 'violet', 'gardenia', 'ch...</td>\n","      <td>CCCCCCC#CC(=O)OC</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0a00373-3100-4fc2-b473-89952e696a78')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d0a00373-3100-4fc2-b473-89952e696a78 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d0a00373-3100-4fc2-b473-89952e696a78');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":255}]},{"cell_type":"code","source":["ingredients_iupac = [cirpy.resolve(i, \"names\")[0] for i in ingredient_names[\"cas_number\"]]"],"metadata":{"id":"-uHwT13vk5DH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ingredients_iupac"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1k8Pl1mblLiS","executionInfo":{"status":"ok","timestamp":1680014637206,"user_tz":-60,"elapsed":7,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"75b683c2-7099-4648-ebb6-bf6b3a0419dc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['1-Phenylethyl acetate',\n"," 'Methyl 2-phenylacetate',\n"," 'Propyl hexanoate',\n"," 'Decanal',\n"," 'Methyl non-2-ynoate',\n"," '1-ethoxy-2-methoxy-4-prop-1-enylbenzene',\n"," '(2Z)-2-(phenylmethylidene)heptanal',\n"," '3-Phenylpropyl propanoate',\n"," '2-Phenylethyl propanoate',\n"," 'Phenylmethyl 2-hydroxybenzoate',\n"," '1-benzofuran-2-carbaldehyde',\n"," '1,5,5-trimethylbicyclo[2.2.1]heptan-6-ol']"]},"metadata":{},"execution_count":257}]},{"cell_type":"markdown","source":["calculating recommender compositions"],"metadata":{"id":"IR8ztL0bsAIh"}},{"cell_type":"code","source":["!pip install thermo"],"metadata":{"id":"j4XQvIoTtjUi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680014640250,"user_tz":-60,"elapsed":3049,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"58da819c-09f5-4730-d437-552d93e70002"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: thermo in /usr/local/lib/python3.9/dist-packages (0.2.23)\n","Requirement already satisfied: chemicals>=1.1.2 in /usr/local/lib/python3.9/dist-packages (from thermo) (1.1.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from thermo) (1.10.1)\n","Requirement already satisfied: fluids>=1.0.22 in /usr/local/lib/python3.9/dist-packages (from thermo) (1.0.22)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from thermo) (1.4.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from chemicals>=1.1.2->thermo) (1.22.4)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->thermo) (2022.7.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas->thermo) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas->thermo) (1.16.0)\n"]}]},{"cell_type":"code","source":["import cirpy\n","from thermo import VaporPressure, search_chemical, phase_change"],"metadata":{"id":"KC0yI-0yjtwK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mw_samples = [ast.literal_eval(cirpy.resolve(cas, 'mw')) for cas in df_filtered[\"CAS\"]] "],"metadata":{"id":"BSwb7gcrDspu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mw_recommender = [ast.literal_eval(cirpy.resolve(cas, 'mw')) for cas in ingredient_names[\"cas_number\"]] "],"metadata":{"id":"DIt4tjZPD22w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["molfraclow_recommender = [0.9*mw_recommender[i]/mw_samples[i]*df_filtered[\"mol_frac\"].values[i] for i in range(0, len(mw_recommender))]"],"metadata":{"id":"hm8I_0s9EHNQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["molfrachigh_recommender = [1.1*mw_recommender[i]/mw_samples[i]*df_filtered[\"mol_frac\"].values[i] for i in range(0, len(mw_recommender))]"],"metadata":{"id":"X38qS5Y8HR9E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["recommender_table = pd.DataFrame({\"sample_ingredients\":list(smiles.keys()),\n","              \"sample_mol_frac\":df_filtered[\"mol_frac\"].values,\n","              \"recommender_cas\":ingredient_names[\"cas_number\"],\n","              \"recommender_name\":ingredients_iupac,\n","              \"recommender_descriptors\":ingredient_names[\"descriptors\"],\n","              \"recommender_mol_frac_low\":molfraclow_recommender,\n","              \"recommender_mol_frac_high\":molfrachigh_recommender\n","              })"],"metadata":{"id":"3fVU6RaqLYUE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["recommender_table"],"metadata":{"id":"t8j40OtqLs6X","colab":{"base_uri":"https://localhost:8080/","height":626},"executionInfo":{"status":"ok","timestamp":1680014642363,"user_tz":-60,"elapsed":8,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"d0f946a4-b4c2-45ac-f94d-0d374467ba09"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          sample_ingredients  sample_mol_frac recommender_cas  \\\n","1371         methyl benzoate           0.0040      29759-11-3   \n","1492          benzyl acetate           0.0055        101-41-7   \n","1916           amyl butyrate           0.0040        626-77-7   \n","590           nonyl aldehyde           0.0115        112-31-2   \n","1479      methyl 2-octynoate           0.0060        111-80-8   \n","799       methyl iso-eugenol           0.0100       7784-67-0   \n","102       amylcinnamaldehyde           0.0160        122-40-7   \n","1838  ethyl 4-phenylbutyrate           0.0070        122-74-7   \n","1785   phenethyl isobutyrate           0.0270        122-70-3   \n","219                  benzoin           0.0345        118-58-1   \n","188                 coumarin           0.0390       4265-16-1   \n","903        patchouli alcohol           0.0115        512-13-0   \n","\n","                              recommender_name  \\\n","1371                     1-Phenylethyl acetate   \n","1492                    Methyl 2-phenylacetate   \n","1916                          Propyl hexanoate   \n","590                                    Decanal   \n","1479                       Methyl non-2-ynoate   \n","799    1-ethoxy-2-methoxy-4-prop-1-enylbenzene   \n","102         (2Z)-2-(phenylmethylidene)heptanal   \n","1838                 3-Phenylpropyl propanoate   \n","1785                  2-Phenylethyl propanoate   \n","219             Phenylmethyl 2-hydroxybenzoate   \n","188                1-benzofuran-2-carbaldehyde   \n","903   1,5,5-trimethylbicyclo[2.2.1]heptan-6-ol   \n","\n","                                recommender_descriptors  \\\n","1371                     ['floral', 'fruiti', 'herbal']   \n","1492  ['floral', 'gerard', 'waxi', 'spice', 'fruiti'...   \n","1916  ['alcohol', 'appl', 'gerard', 'juici', 'green'...   \n","590   ['aldehyd', 'gardenia', 'citrus', 'gerard', 'w...   \n","1479  ['aldehyd', 'melon', 'violet', 'gardenia', 'ch...   \n","799                                           ['spice']   \n","102   ['appl', 'spice', 'tropic', 'powderi', 'aromat...   \n","1838                   ['balsam', 'hyacinth', 'floral']   \n","1785  ['balsam', 'floral', 'aromat', 'rose', 'berri'...   \n","219   ['balsam', 'herbal', 'spice', 'oili', 'floral'...   \n","188                                ['almond', 'bitter']   \n","903   ['cool', 'mint', 'gerard', 'green', 'woodi', '...   \n","\n","      recommender_mol_frac_low  recommender_mol_frac_high  \n","1371                  0.004342                   0.005307  \n","1492                  0.004950                   0.006050  \n","1916                  0.003600                   0.004400  \n","590                   0.011371                   0.013897  \n","1479                  0.005891                   0.007200  \n","799                   0.009708                   0.011866  \n","102                   0.014400                   0.017600  \n","1838                  0.006300                   0.007700  \n","1785                  0.022527                   0.027533  \n","219                   0.033391                   0.040811  \n","188                   0.035100                   0.042900  \n","903                   0.007180                   0.008775  "],"text/html":["\n","  <div id=\"df-06a60adf-e793-48cc-8999-e08fe75b073b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sample_ingredients</th>\n","      <th>sample_mol_frac</th>\n","      <th>recommender_cas</th>\n","      <th>recommender_name</th>\n","      <th>recommender_descriptors</th>\n","      <th>recommender_mol_frac_low</th>\n","      <th>recommender_mol_frac_high</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1371</th>\n","      <td>methyl benzoate</td>\n","      <td>0.0040</td>\n","      <td>29759-11-3</td>\n","      <td>1-Phenylethyl acetate</td>\n","      <td>['floral', 'fruiti', 'herbal']</td>\n","      <td>0.004342</td>\n","      <td>0.005307</td>\n","    </tr>\n","    <tr>\n","      <th>1492</th>\n","      <td>benzyl acetate</td>\n","      <td>0.0055</td>\n","      <td>101-41-7</td>\n","      <td>Methyl 2-phenylacetate</td>\n","      <td>['floral', 'gerard', 'waxi', 'spice', 'fruiti'...</td>\n","      <td>0.004950</td>\n","      <td>0.006050</td>\n","    </tr>\n","    <tr>\n","      <th>1916</th>\n","      <td>amyl butyrate</td>\n","      <td>0.0040</td>\n","      <td>626-77-7</td>\n","      <td>Propyl hexanoate</td>\n","      <td>['alcohol', 'appl', 'gerard', 'juici', 'green'...</td>\n","      <td>0.003600</td>\n","      <td>0.004400</td>\n","    </tr>\n","    <tr>\n","      <th>590</th>\n","      <td>nonyl aldehyde</td>\n","      <td>0.0115</td>\n","      <td>112-31-2</td>\n","      <td>Decanal</td>\n","      <td>['aldehyd', 'gardenia', 'citrus', 'gerard', 'w...</td>\n","      <td>0.011371</td>\n","      <td>0.013897</td>\n","    </tr>\n","    <tr>\n","      <th>1479</th>\n","      <td>methyl 2-octynoate</td>\n","      <td>0.0060</td>\n","      <td>111-80-8</td>\n","      <td>Methyl non-2-ynoate</td>\n","      <td>['aldehyd', 'melon', 'violet', 'gardenia', 'ch...</td>\n","      <td>0.005891</td>\n","      <td>0.007200</td>\n","    </tr>\n","    <tr>\n","      <th>799</th>\n","      <td>methyl iso-eugenol</td>\n","      <td>0.0100</td>\n","      <td>7784-67-0</td>\n","      <td>1-ethoxy-2-methoxy-4-prop-1-enylbenzene</td>\n","      <td>['spice']</td>\n","      <td>0.009708</td>\n","      <td>0.011866</td>\n","    </tr>\n","    <tr>\n","      <th>102</th>\n","      <td>amylcinnamaldehyde</td>\n","      <td>0.0160</td>\n","      <td>122-40-7</td>\n","      <td>(2Z)-2-(phenylmethylidene)heptanal</td>\n","      <td>['appl', 'spice', 'tropic', 'powderi', 'aromat...</td>\n","      <td>0.014400</td>\n","      <td>0.017600</td>\n","    </tr>\n","    <tr>\n","      <th>1838</th>\n","      <td>ethyl 4-phenylbutyrate</td>\n","      <td>0.0070</td>\n","      <td>122-74-7</td>\n","      <td>3-Phenylpropyl propanoate</td>\n","      <td>['balsam', 'hyacinth', 'floral']</td>\n","      <td>0.006300</td>\n","      <td>0.007700</td>\n","    </tr>\n","    <tr>\n","      <th>1785</th>\n","      <td>phenethyl isobutyrate</td>\n","      <td>0.0270</td>\n","      <td>122-70-3</td>\n","      <td>2-Phenylethyl propanoate</td>\n","      <td>['balsam', 'floral', 'aromat', 'rose', 'berri'...</td>\n","      <td>0.022527</td>\n","      <td>0.027533</td>\n","    </tr>\n","    <tr>\n","      <th>219</th>\n","      <td>benzoin</td>\n","      <td>0.0345</td>\n","      <td>118-58-1</td>\n","      <td>Phenylmethyl 2-hydroxybenzoate</td>\n","      <td>['balsam', 'herbal', 'spice', 'oili', 'floral'...</td>\n","      <td>0.033391</td>\n","      <td>0.040811</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>coumarin</td>\n","      <td>0.0390</td>\n","      <td>4265-16-1</td>\n","      <td>1-benzofuran-2-carbaldehyde</td>\n","      <td>['almond', 'bitter']</td>\n","      <td>0.035100</td>\n","      <td>0.042900</td>\n","    </tr>\n","    <tr>\n","      <th>903</th>\n","      <td>patchouli alcohol</td>\n","      <td>0.0115</td>\n","      <td>512-13-0</td>\n","      <td>1,5,5-trimethylbicyclo[2.2.1]heptan-6-ol</td>\n","      <td>['cool', 'mint', 'gerard', 'green', 'woodi', '...</td>\n","      <td>0.007180</td>\n","      <td>0.008775</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06a60adf-e793-48cc-8999-e08fe75b073b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-06a60adf-e793-48cc-8999-e08fe75b073b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-06a60adf-e793-48cc-8999-e08fe75b073b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":265}]},{"cell_type":"code","source":["recommender_table.to_csv(\"/content/drive/MyDrive/Colab Notebooks/Projeto_Sandris/Data/recommender_smell_1.csv\", sep = \";\", index = False)"],"metadata":{"id":"Xgh5booqkpka"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["recommender_table.to_excel(\"/content/drive/MyDrive/Colab Notebooks/Projeto_Sandris/Data/recommender_smell_6.xlsx\")"],"metadata":{"id":"E_9NsD5hnOTl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.__version__"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"_MQ3xnMueDHF","executionInfo":{"status":"ok","timestamp":1679927302783,"user_tz":-60,"elapsed":900,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"8f2bd5cc-c3aa-43a2-fd5d-615197d16302"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1.13.1+cu116'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["Visualizing AI recommendation"],"metadata":{"id":"rwSSucT-wmqG"}},{"cell_type":"code","source":["from sklearn.manifold import TSNE\n","import matplotlib.pyplot as plt"],"metadata":{"id":"MOvvYNE2xL1n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Generate or load your high-dimensional data\n","# In this example, we'll create a random 100x10 dataset\n","high_dim_data = np_output_db\n","\n","# Create a t-SNE object and set parameters (optional)\n","tsne = TSNE(n_components = 2, perplexity = 20 , learning_rate=200, random_state=42)\n","\n","# Perform t-SNE dimensionality reduction\n","low_dim_data = tsne.fit_transform(np_output_db)"],"metadata":{"id":"ho9jH3EnsQ_h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.scatter(low_dim_data[:, 0], low_dim_data[:, 1], c='lightblue', edgecolors='black', marker='o')\n","plt.xlabel('t-SNE Component 1')\n","plt.ylabel('t-SNE Component 2')\n","plt.title('t-SNE Visualization')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"OFBdHLsHwxVU","executionInfo":{"status":"ok","timestamp":1679312314017,"user_tz":0,"elapsed":732,"user":{"displayName":"Vinicius Viena","userId":"05345757019004428013"}},"outputId":"df2aa82d-0875-4c6b-d62f-5572510123f6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["vocabulary = np.array(['alcohol', 'aldehyd', 'almond', 'amber', 'anim', 'anis', 'appl',\n","       'apricot', 'aromat', 'bakeri', 'balsam', 'banana', 'bergamot',\n","       'berri', 'beverag', 'bitter', 'brown', 'burnt', 'butter',\n","       'camphor', 'caramel', 'cedar', 'chees', 'chemic', 'cherri',\n","       'chocol', 'cinnamon', 'citrus', 'clean', 'cocoa', 'coconut',\n","       'coffe', 'cognac', 'cool', 'cortex', 'coumarin', 'creami',\n","       'cucumb', 'dairi', 'earthi', 'ether', 'fatti', 'ferment', 'floral',\n","       'flower', 'fresh', 'fruiti', 'gardenia', 'geranium', 'gerard',\n","       'grape', 'grassi', 'green', 'herbal', 'honey', 'hyacinth',\n","       'jasmin', 'juici', 'lacton', 'lavend', 'leaf', 'leather', 'lemon',\n","       'lilac', 'lili', 'lime', 'meat', 'medicin', 'melon', 'metal',\n","       'milki', 'mint', 'muguet', 'mushroom', 'musk', 'musti', 'natur',\n","       'neroli', 'nutti', 'oili', 'orang', 'orri', 'ozon', 'peach',\n","       'pear', 'phenol', 'pine', 'pineappl', 'plum', 'powderi', 'pungent',\n","       'raspberri', 'ripe', 'roast', 'rose', 'sharp', 'soapi', 'spice',\n","       'strawberri', 'sulfur', 'terpen', 'tobacco', 'tropic', 'vanilla',\n","       'veget', 'vetiv', 'violet', 'warm', 'waxi', 'weedi', 'wine',\n","       'woodi'])"],"metadata":{"id":"PSTWo8Pq_xEL"},"execution_count":null,"outputs":[]}]}